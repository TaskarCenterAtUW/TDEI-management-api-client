"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GTFSFlexApi = exports.GTFSFlexApiFactory = exports.GTFSFlexApiFp = exports.GTFSFlexApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * TDEI Gateway API
 * This is an API for publishing data to the Transportation Data Equity Initiative (TDEI) data system. This API is intended for applications producing data for and consuming data from the TDEI system. This API supports publishing of GTFS-Pathways, GTFS-Flex v2 and OpenSidewalks data to the TDEI.
 *
 * OpenAPI spec version: v0.1
 * Contact: placeholder_support@transequity.cs.washington.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
/**
 * GTFSFlexApi - axios parameter creator
 * @export
 */
exports.GTFSFlexApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * returns a specific gtfs_flex file identified by the tdei_record_id
         * @summary returns a gtfs_flex file
         * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlexFile: function (tdei_record_id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'tdei_record_id' is not null or undefined
                            if (tdei_record_id === null || tdei_record_id === undefined) {
                                throw new base_1.RequiredError('tdei_record_id', 'Required parameter tdei_record_id was null or undefined when calling getFlexFile.');
                            }
                            localVarPath = "/api/v1/gtfs-flex/{tdei_record_id}"
                                .replace("{" + "tdei_record_id" + "}", encodeURIComponent(String(tdei_record_id)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint returns a json list of all gtfs flex files stored in the TDEI system that meet the specified criteria. Criteria that can be specified include: polygon (bounding box), minimum confidence level, flex version, date time and organization id.  This endpoint can be used by an application developer to obtain a list of gtfs flex files in the TDEI system meeting the specified criteria. This endpoint returns a list of file-metadata including the uris of the file, which can be used to fetch the files themselves.
         * @summary List flex files meeting specified criteria.
         * @param {string} [tdei_service_id] Id of the flex service.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [flex_schema_version] version name of the flex schema version that the application requests. list of versions can be found with /api/v1/gtfs-flex/versions.
         * @param {string} [_tdei_org_id] tdei-assigned organization id. Represented as a UUID.
         * @param {string} [date_time] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
         * @param {string} [tdei_record_id] if included, returns the metadata for the specified file, all other parameters will be ignored.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlexFiles: function (tdei_service_id, bbox, flex_schema_version, _tdei_org_id, date_time, tdei_record_id, page_no, page_size, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            localVarPath = "/api/v1/gtfs-flex";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            if (tdei_service_id !== undefined) {
                                localVarQueryParameter['tdei_service_id'] = tdei_service_id;
                            }
                            if (bbox) {
                                localVarQueryParameter['bbox'] = bbox;
                            }
                            if (flex_schema_version !== undefined) {
                                localVarQueryParameter['flex_schema_version'] = flex_schema_version;
                            }
                            if (_tdei_org_id !== undefined) {
                                localVarQueryParameter[' tdei_org_id'] = _tdei_org_id;
                            }
                            if (date_time !== undefined) {
                                localVarQueryParameter['date_time'] = date_time;
                            }
                            if (tdei_record_id !== undefined) {
                                localVarQueryParameter['tdei_record_id'] = tdei_record_id;
                            }
                            if (page_no !== undefined) {
                                localVarQueryParameter['page_no'] = page_no;
                            }
                            if (page_size !== undefined) {
                                localVarQueryParameter['page_size'] = page_size;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Path used to retrieve the list of GTFS Services in the TDEI system. Allows callers to get the tdei_service_id id for a service.  Returns the tdei_service_id and service name for all services in the TDEI system.   If tdei_org_id param is used, will return services for that organization.
         * @summary List GTFS Flex Services
         * @param {string} [tdei_org_id] A tdei-assigned id for an organization. org_ids can be retrieved using the path /api/v1/organizations.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlexServices: function (tdei_org_id, page_no, page_size, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            localVarPath = "/api/v1/gtfs-flex/services";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            if (tdei_org_id !== undefined) {
                                localVarQueryParameter['tdei_org_id'] = tdei_org_id;
                            }
                            if (page_no !== undefined) {
                                localVarQueryParameter['page_no'] = page_no;
                            }
                            if (page_size !== undefined) {
                                localVarQueryParameter['page_size'] = page_size;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List GTFS flex versions supported by TDEI.  Returns a json list of the GTFS flex versions supported by TDEI.
         * @summary List available GTFS flex versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlexVersions: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, accessToken, _b, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            localVarPath = "/api/v1/gtfs-flex/versions";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.apiKey)) return [3 /*break*/, 5];
                            if (!(typeof configuration.apiKey === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.apiKey("x-api-key")];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.apiKey];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            localVarApiKeyValue = _a;
                            localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
                            _c.label = 5;
                        case 5:
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 10];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 7];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, configuration.accessToken];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            accessToken = _b;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _c.label = 10;
                        case 10:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This call allows a user to upload or create a new gtfs flex file. The caller must provide metadata about the file. Required metadata includes information about how and when the data was collected and valid dates of the file. Returns the tdei_record_id of the uploaded file.
         * @summary upload a new gtfs_flex file
         * @param {GtfsFlexUpload} meta
         * @param {Blob} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadGtfsFlexFileForm: function (meta, file, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'meta' is not null or undefined
                            if (meta === null || meta === undefined) {
                                throw new base_1.RequiredError('meta', 'Required parameter meta was null or undefined when calling uploadGtfsFlexFileForm.');
                            }
                            // verify required parameter 'file' is not null or undefined
                            if (file === null || file === undefined) {
                                throw new base_1.RequiredError('file', 'Required parameter file was null or undefined when calling uploadGtfsFlexFileForm.');
                            }
                            localVarPath = "/api/v1/gtfs-flex";
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new FormData();
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            if (meta !== undefined) {
                                localVarFormParams.append('meta', meta);
                            }
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * GTFSFlexApi - functional programming interface
 * @export
 */
exports.GTFSFlexApiFp = function (configuration) {
    return {
        /**
         * returns a specific gtfs_flex file identified by the tdei_record_id
         * @summary returns a gtfs_flex file
         * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlexFile: function (tdei_record_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.GTFSFlexApiAxiosParamCreator(configuration).getFlexFile(tdei_record_id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint returns a json list of all gtfs flex files stored in the TDEI system that meet the specified criteria. Criteria that can be specified include: polygon (bounding box), minimum confidence level, flex version, date time and organization id.  This endpoint can be used by an application developer to obtain a list of gtfs flex files in the TDEI system meeting the specified criteria. This endpoint returns a list of file-metadata including the uris of the file, which can be used to fetch the files themselves.
         * @summary List flex files meeting specified criteria.
         * @param {string} [tdei_service_id] Id of the flex service.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [flex_schema_version] version name of the flex schema version that the application requests. list of versions can be found with /api/v1/gtfs-flex/versions.
         * @param {string} [_tdei_org_id] tdei-assigned organization id. Represented as a UUID.
         * @param {string} [date_time] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
         * @param {string} [tdei_record_id] if included, returns the metadata for the specified file, all other parameters will be ignored.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlexFiles: function (tdei_service_id, bbox, flex_schema_version, _tdei_org_id, date_time, tdei_record_id, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.GTFSFlexApiAxiosParamCreator(configuration).listFlexFiles(tdei_service_id, bbox, flex_schema_version, _tdei_org_id, date_time, tdei_record_id, page_no, page_size, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Path used to retrieve the list of GTFS Services in the TDEI system. Allows callers to get the tdei_service_id id for a service.  Returns the tdei_service_id and service name for all services in the TDEI system.   If tdei_org_id param is used, will return services for that organization.
         * @summary List GTFS Flex Services
         * @param {string} [tdei_org_id] A tdei-assigned id for an organization. org_ids can be retrieved using the path /api/v1/organizations.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlexServices: function (tdei_org_id, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.GTFSFlexApiAxiosParamCreator(configuration).listFlexServices(tdei_org_id, page_no, page_size, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * List GTFS flex versions supported by TDEI.  Returns a json list of the GTFS flex versions supported by TDEI.
         * @summary List available GTFS flex versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlexVersions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.GTFSFlexApiAxiosParamCreator(configuration).listFlexVersions(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * This call allows a user to upload or create a new gtfs flex file. The caller must provide metadata about the file. Required metadata includes information about how and when the data was collected and valid dates of the file. Returns the tdei_record_id of the uploaded file.
         * @summary upload a new gtfs_flex file
         * @param {GtfsFlexUpload} meta
         * @param {Blob} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadGtfsFlexFileForm: function (meta, file, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.GTFSFlexApiAxiosParamCreator(configuration).uploadGtfsFlexFileForm(meta, file, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * GTFSFlexApi - factory interface
 * @export
 */
exports.GTFSFlexApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * returns a specific gtfs_flex file identified by the tdei_record_id
         * @summary returns a gtfs_flex file
         * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlexFile: function (tdei_record_id, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, exports.GTFSFlexApiFp(configuration).getFlexFile(tdei_record_id, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * This endpoint returns a json list of all gtfs flex files stored in the TDEI system that meet the specified criteria. Criteria that can be specified include: polygon (bounding box), minimum confidence level, flex version, date time and organization id.  This endpoint can be used by an application developer to obtain a list of gtfs flex files in the TDEI system meeting the specified criteria. This endpoint returns a list of file-metadata including the uris of the file, which can be used to fetch the files themselves.
         * @summary List flex files meeting specified criteria.
         * @param {string} [tdei_service_id] Id of the flex service.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [flex_schema_version] version name of the flex schema version that the application requests. list of versions can be found with /api/v1/gtfs-flex/versions.
         * @param {string} [_tdei_org_id] tdei-assigned organization id. Represented as a UUID.
         * @param {string} [date_time] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
         * @param {string} [tdei_record_id] if included, returns the metadata for the specified file, all other parameters will be ignored.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlexFiles: function (tdei_service_id, bbox, flex_schema_version, _tdei_org_id, date_time, tdei_record_id, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, exports.GTFSFlexApiFp(configuration).listFlexFiles(tdei_service_id, bbox, flex_schema_version, _tdei_org_id, date_time, tdei_record_id, page_no, page_size, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Path used to retrieve the list of GTFS Services in the TDEI system. Allows callers to get the tdei_service_id id for a service.  Returns the tdei_service_id and service name for all services in the TDEI system.   If tdei_org_id param is used, will return services for that organization.
         * @summary List GTFS Flex Services
         * @param {string} [tdei_org_id] A tdei-assigned id for an organization. org_ids can be retrieved using the path /api/v1/organizations.
         * @param {number} [page_no] Integer, defaults to 1.
         * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlexServices: function (tdei_org_id, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, exports.GTFSFlexApiFp(configuration).listFlexServices(tdei_org_id, page_no, page_size, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * List GTFS flex versions supported by TDEI.  Returns a json list of the GTFS flex versions supported by TDEI.
         * @summary List available GTFS flex versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlexVersions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, exports.GTFSFlexApiFp(configuration).listFlexVersions(options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * This call allows a user to upload or create a new gtfs flex file. The caller must provide metadata about the file. Required metadata includes information about how and when the data was collected and valid dates of the file. Returns the tdei_record_id of the uploaded file.
         * @summary upload a new gtfs_flex file
         * @param {GtfsFlexUpload} meta
         * @param {Blob} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadGtfsFlexFileForm: function (meta, file, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, exports.GTFSFlexApiFp(configuration).uploadGtfsFlexFileForm(meta, file, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
    };
};
/**
 * GTFSFlexApi - object-oriented interface
 * @export
 * @class GTFSFlexApi
 * @extends {BaseAPI}
 */
var GTFSFlexApi = /** @class */ (function (_super) {
    __extends(GTFSFlexApi, _super);
    function GTFSFlexApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * returns a specific gtfs_flex file identified by the tdei_record_id
     * @summary returns a gtfs_flex file
     * @param {string} tdei_record_id tdei_record_id for a file, represented as a uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    GTFSFlexApi.prototype.getFlexFile = function (tdei_record_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, exports.GTFSFlexApiFp(this.configuration).getFlexFile(tdei_record_id, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * This endpoint returns a json list of all gtfs flex files stored in the TDEI system that meet the specified criteria. Criteria that can be specified include: polygon (bounding box), minimum confidence level, flex version, date time and organization id.  This endpoint can be used by an application developer to obtain a list of gtfs flex files in the TDEI system meeting the specified criteria. This endpoint returns a list of file-metadata including the uris of the file, which can be used to fetch the files themselves.
     * @summary List flex files meeting specified criteria.
     * @param {string} [tdei_service_id] Id of the flex service.
     * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {string} [flex_schema_version] version name of the flex schema version that the application requests. list of versions can be found with /api/v1/gtfs-flex/versions.
     * @param {string} [_tdei_org_id] tdei-assigned organization id. Represented as a UUID.
     * @param {string} [date_time] date-time for which the caller is interested in obtaining files. all files that are valid at the specified date-time and meet the other criteria will be returned.
     * @param {string} [tdei_record_id] if included, returns the metadata for the specified file, all other parameters will be ignored.
     * @param {number} [page_no] Integer, defaults to 1.
     * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    GTFSFlexApi.prototype.listFlexFiles = function (tdei_service_id, bbox, flex_schema_version, _tdei_org_id, date_time, tdei_record_id, page_no, page_size, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, exports.GTFSFlexApiFp(this.configuration).listFlexFiles(tdei_service_id, bbox, flex_schema_version, _tdei_org_id, date_time, tdei_record_id, page_no, page_size, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Path used to retrieve the list of GTFS Services in the TDEI system. Allows callers to get the tdei_service_id id for a service.  Returns the tdei_service_id and service name for all services in the TDEI system.   If tdei_org_id param is used, will return services for that organization.
     * @summary List GTFS Flex Services
     * @param {string} [tdei_org_id] A tdei-assigned id for an organization. org_ids can be retrieved using the path /api/v1/organizations.
     * @param {number} [page_no] Integer, defaults to 1.
     * @param {number} [page_size] page size. integer, between 1 to 50, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    GTFSFlexApi.prototype.listFlexServices = function (tdei_org_id, page_no, page_size, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, exports.GTFSFlexApiFp(this.configuration).listFlexServices(tdei_org_id, page_no, page_size, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * List GTFS flex versions supported by TDEI.  Returns a json list of the GTFS flex versions supported by TDEI.
     * @summary List available GTFS flex versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    GTFSFlexApi.prototype.listFlexVersions = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, exports.GTFSFlexApiFp(this.configuration).listFlexVersions(options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * This call allows a user to upload or create a new gtfs flex file. The caller must provide metadata about the file. Required metadata includes information about how and when the data was collected and valid dates of the file. Returns the tdei_record_id of the uploaded file.
     * @summary upload a new gtfs_flex file
     * @param {GtfsFlexUpload} meta
     * @param {Blob} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GTFSFlexApi
     */
    GTFSFlexApi.prototype.uploadGtfsFlexFileForm = function (meta, file, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, exports.GTFSFlexApiFp(this.configuration).uploadGtfsFlexFileForm(meta, file, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    return GTFSFlexApi;
}(base_1.BaseAPI));
exports.GTFSFlexApi = GTFSFlexApi;
