/**
 * TDEI Management API
 * Management API, describes admin & user activities in the TDEI system.
 *
 * OpenAPI spec version: v0.1
 * Contact: placeholder_support@transequity.cs.washington.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { OrgUser } from '../models';
import { Organization } from '../models';
import { OrganizationList } from '../models';
import { Response } from '../models';
/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export declare const OrganizationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates an organization in the TDEI system.  Returns the id for the newly created organization.
     * @summary Creates an organization in the TDEI system
     * @param {Organization} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization: (body: Organization, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the organizations in the TDEI system .
     * @summary Gets the organizations in the TDEI system
     * @param {string} [tdei_org_id] Search by organization Id.
     * @param {string} [searchText] Search by organization name.
     * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {string} [page_no] Page number to fetch
     * @param {string} [page_size] Total records to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: (tdei_org_id?: string, searchText?: string, bbox?: Array<number>, page_no?: string, page_size?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the organization users in the TDEI system .
     * @summary Gets the organization users in the TDEI system
     * @param {string} orgId Organization id for which users to be fetched
     * @param {string} [searchText] Search by organization name.
     * @param {string} [page_no] Page number to fetch
     * @param {string} [page_size] Total records to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUsers: (orgId: string, searchText?: string, page_no?: string, page_size?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Activates/Deactives the organization.
     * @summary Activates/Deactives the organization.
     * @param {string} orgId Organization Id of the organization to be Activated/Deactivated.
     * @param {boolean} status Boolean flag to Activate/Deactivate organization.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServiceStatus: (orgId: string, status: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an organization in the TDEI system.  Returns success if updated.
     * @summary Updates an organization in the TDEI system
     * @param {Organization} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganization: (body: Organization, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OrganizationApi - functional programming interface
 * @export
 */
export declare const OrganizationApiFp: (configuration?: Configuration) => {
    /**
     * Creates an organization in the TDEI system.  Returns the id for the newly created organization.
     * @summary Creates an organization in the TDEI system
     * @param {Organization} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization(body: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Response>>>;
    /**
     * Gets the organizations in the TDEI system .
     * @summary Gets the organizations in the TDEI system
     * @param {string} [tdei_org_id] Search by organization Id.
     * @param {string} [searchText] Search by organization name.
     * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {string} [page_no] Page number to fetch
     * @param {string} [page_size] Total records to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(tdei_org_id?: string, searchText?: string, bbox?: Array<number>, page_no?: string, page_size?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrganizationList>>>;
    /**
     * Gets the organization users in the TDEI system .
     * @summary Gets the organization users in the TDEI system
     * @param {string} orgId Organization id for which users to be fetched
     * @param {string} [searchText] Search by organization name.
     * @param {string} [page_no] Page number to fetch
     * @param {string} [page_size] Total records to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUsers(orgId: string, searchText?: string, page_no?: string, page_size?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrgUser>>>;
    /**
     * Activates/Deactives the organization.
     * @summary Activates/Deactives the organization.
     * @param {string} orgId Organization Id of the organization to be Activated/Deactivated.
     * @param {boolean} status Boolean flag to Activate/Deactivate organization.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServiceStatus(orgId: string, status: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     * Updates an organization in the TDEI system.  Returns success if updated.
     * @summary Updates an organization in the TDEI system
     * @param {Organization} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganization(body: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
};
/**
 * OrganizationApi - factory interface
 * @export
 */
export declare const OrganizationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates an organization in the TDEI system.  Returns the id for the newly created organization.
     * @summary Creates an organization in the TDEI system
     * @param {Organization} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization(body: Organization, options?: AxiosRequestConfig): Promise<AxiosResponse<Response>>;
    /**
     * Gets the organizations in the TDEI system .
     * @summary Gets the organizations in the TDEI system
     * @param {string} [tdei_org_id] Search by organization Id.
     * @param {string} [searchText] Search by organization name.
     * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {string} [page_no] Page number to fetch
     * @param {string} [page_size] Total records to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(tdei_org_id?: string, searchText?: string, bbox?: Array<number>, page_no?: string, page_size?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationList>>;
    /**
     * Gets the organization users in the TDEI system .
     * @summary Gets the organization users in the TDEI system
     * @param {string} orgId Organization id for which users to be fetched
     * @param {string} [searchText] Search by organization name.
     * @param {string} [page_no] Page number to fetch
     * @param {string} [page_size] Total records to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUsers(orgId: string, searchText?: string, page_no?: string, page_size?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OrgUser>>;
    /**
     * Activates/Deactives the organization.
     * @summary Activates/Deactives the organization.
     * @param {string} orgId Organization Id of the organization to be Activated/Deactivated.
     * @param {boolean} status Boolean flag to Activate/Deactivate organization.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServiceStatus(orgId: string, status: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     * Updates an organization in the TDEI system.  Returns success if updated.
     * @summary Updates an organization in the TDEI system
     * @param {Organization} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganization(body: Organization, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
};
/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export declare class OrganizationApi extends BaseAPI {
    /**
     * Creates an organization in the TDEI system.  Returns the id for the newly created organization.
     * @summary Creates an organization in the TDEI system
     * @param {Organization} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    createOrganization(body: Organization, options?: AxiosRequestConfig): Promise<AxiosResponse<Response>>;
    /**
     * Gets the organizations in the TDEI system .
     * @summary Gets the organizations in the TDEI system
     * @param {string} [tdei_org_id] Search by organization Id.
     * @param {string} [searchText] Search by organization name.
     * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {string} [page_no] Page number to fetch
     * @param {string} [page_size] Total records to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    getOrganization(tdei_org_id?: string, searchText?: string, bbox?: Array<number>, page_no?: string, page_size?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationList>>;
    /**
     * Gets the organization users in the TDEI system .
     * @summary Gets the organization users in the TDEI system
     * @param {string} orgId Organization id for which users to be fetched
     * @param {string} [searchText] Search by organization name.
     * @param {string} [page_no] Page number to fetch
     * @param {string} [page_size] Total records to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    getOrganizationUsers(orgId: string, searchText?: string, page_no?: string, page_size?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OrgUser>>;
    /**
     * Activates/Deactives the organization.
     * @summary Activates/Deactives the organization.
     * @param {string} orgId Organization Id of the organization to be Activated/Deactivated.
     * @param {boolean} status Boolean flag to Activate/Deactivate organization.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    setServiceStatus(orgId: string, status: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     * Updates an organization in the TDEI system.  Returns success if updated.
     * @summary Updates an organization in the TDEI system
     * @param {Organization} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    updateOrganization(body: Organization, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
}
