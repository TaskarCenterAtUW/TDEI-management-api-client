/**
 * TDEI Management API
 * Management API, describes admin & user activities in the TDEI system.
 *
 * OpenAPI spec version: v0.1
 * Contact: placeholder_support@transequity.cs.washington.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Login } from '../models';
import { Token } from '../models';
import { UserProfile } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Authenticates the user to the TDEI system.  Returns access token.
     * @summary Authenticates the user to the TDEI system
     * @param {Login} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticate: (body: Login, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the user profile.
     * @summary Gets the user profile
     * @param {string} [user_name] User name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProfile: (user_name?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Refresh the user token
     * @summary Refresh the user token
     * @param {string} refresh_token Valid refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken: (refresh_token: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     * Authenticates the user to the TDEI system.  Returns access token.
     * @summary Authenticates the user to the TDEI system
     * @param {Login} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticate(body: Login, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Token>>>;
    /**
     * Gets the user profile.
     * @summary Gets the user profile
     * @param {string} [user_name] User name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProfile(user_name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserProfile>>>;
    /**
     * Refresh the user token
     * @summary Refresh the user token
     * @param {string} refresh_token Valid refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(refresh_token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Token>>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Authenticates the user to the TDEI system.  Returns access token.
     * @summary Authenticates the user to the TDEI system
     * @param {Login} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticate(body: Login, options?: AxiosRequestConfig): Promise<AxiosResponse<Token>>;
    /**
     * Gets the user profile.
     * @summary Gets the user profile
     * @param {string} [user_name] User name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProfile(user_name?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserProfile>>;
    /**
     * Refresh the user token
     * @summary Refresh the user token
     * @param {string} refresh_token Valid refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(refresh_token: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Token>>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     * Authenticates the user to the TDEI system.  Returns access token.
     * @summary Authenticates the user to the TDEI system
     * @param {Login} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authenticate(body: Login, options?: AxiosRequestConfig): Promise<AxiosResponse<Token>>;
    /**
     * Gets the user profile.
     * @summary Gets the user profile
     * @param {string} [user_name] User name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    getUserProfile(user_name?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserProfile>>;
    /**
     * Refresh the user token
     * @summary Refresh the user token
     * @param {string} refresh_token Valid refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    refreshToken(refresh_token: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Token>>;
}
