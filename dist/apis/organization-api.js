"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationApi = exports.OrganizationApiFactory = exports.OrganizationApiFp = exports.OrganizationApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * TDEI Management API
 * Management API, describes admin & user activities in the TDEI system.
 *
 * OpenAPI spec version: v0.1
 * Contact: placeholder_support@transequity.cs.washington.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
/**
 * OrganizationApi - axios parameter creator
 * @export
 */
exports.OrganizationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates an organization in the TDEI system.  Returns the id for the newly created organization.
         * @summary Creates an organization in the TDEI system
         * @param {Organization} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createOrganization.');
                    }
                    localVarPath = "/api/v1/organization";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication AuthorizationToken required
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Activates/Deactives the organization.
         * @summary Activates/Deactives the organization.
         * @param {string} orgId Organization Id of the organization to be Activated/Deactivated.
         * @param {boolean} status Boolean flag to Activate/Deactivate organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization: function (orgId, status, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'orgId' is not null or undefined
                    if (orgId === null || orgId === undefined) {
                        throw new base_1.RequiredError('orgId', 'Required parameter orgId was null or undefined when calling deleteOrganization.');
                    }
                    // verify required parameter 'status' is not null or undefined
                    if (status === null || status === undefined) {
                        throw new base_1.RequiredError('status', 'Required parameter status was null or undefined when calling deleteOrganization.');
                    }
                    localVarPath = "/api/v1/organization/{orgId}/active/{status}"
                        .replace("{" + "orgId" + "}", encodeURIComponent(String(orgId)))
                        .replace("{" + "status" + "}", encodeURIComponent(String(status)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Gets the organizations in the TDEI system .
         * @summary Gets the organizations in the TDEI system
         * @param {string} [tdei_org_id] Search by organization Id.
         * @param {string} [searchText] Search by organization name.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [page_no] Page number to fetch
         * @param {string} [page_size] Total records to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: function (tdei_org_id, searchText, bbox, page_no, page_size, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/organization";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication AuthorizationToken required
                    if (tdei_org_id !== undefined) {
                        localVarQueryParameter['tdei_org_id'] = tdei_org_id;
                    }
                    if (searchText !== undefined) {
                        localVarQueryParameter['searchText'] = searchText;
                    }
                    if (bbox) {
                        localVarQueryParameter['bbox'] = bbox;
                    }
                    if (page_no !== undefined) {
                        localVarQueryParameter['page_no'] = page_no;
                    }
                    if (page_size !== undefined) {
                        localVarQueryParameter['page_size'] = page_size;
                    }
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Gets the organization users in the TDEI system .
         * @summary Gets the organization users in the TDEI system
         * @param {string} orgId Organization id for which users to be fetched
         * @param {string} [searchText] Search by organization name.
         * @param {string} [page_no] Page number to fetch
         * @param {string} [page_size] Total records to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsers: function (orgId, searchText, page_no, page_size, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'orgId' is not null or undefined
                    if (orgId === null || orgId === undefined) {
                        throw new base_1.RequiredError('orgId', 'Required parameter orgId was null or undefined when calling getOrganizationUsers.');
                    }
                    localVarPath = "/api/v1/organization/{orgId}/users"
                        .replace("{" + "orgId" + "}", encodeURIComponent(String(orgId)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication AuthorizationToken required
                    if (searchText !== undefined) {
                        localVarQueryParameter['searchText'] = searchText;
                    }
                    if (page_no !== undefined) {
                        localVarQueryParameter['page_no'] = page_no;
                    }
                    if (page_size !== undefined) {
                        localVarQueryParameter['page_size'] = page_size;
                    }
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Updates an organization in the TDEI system.  Returns success if updated.
         * @summary Updates an organization in the TDEI system
         * @param {Organization} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateOrganization.');
                    }
                    localVarPath = "/api/v1/organization";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication AuthorizationToken required
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * OrganizationApi - functional programming interface
 * @export
 */
exports.OrganizationApiFp = function (configuration) {
    return {
        /**
         * Creates an organization in the TDEI system.  Returns the id for the newly created organization.
         * @summary Creates an organization in the TDEI system
         * @param {Organization} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OrganizationApiAxiosParamCreator(configuration).createOrganization(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Activates/Deactives the organization.
         * @summary Activates/Deactives the organization.
         * @param {string} orgId Organization Id of the organization to be Activated/Deactivated.
         * @param {boolean} status Boolean flag to Activate/Deactivate organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization: function (orgId, status, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OrganizationApiAxiosParamCreator(configuration).deleteOrganization(orgId, status, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Gets the organizations in the TDEI system .
         * @summary Gets the organizations in the TDEI system
         * @param {string} [tdei_org_id] Search by organization Id.
         * @param {string} [searchText] Search by organization name.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [page_no] Page number to fetch
         * @param {string} [page_size] Total records to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: function (tdei_org_id, searchText, bbox, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OrganizationApiAxiosParamCreator(configuration).getOrganization(tdei_org_id, searchText, bbox, page_no, page_size, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Gets the organization users in the TDEI system .
         * @summary Gets the organization users in the TDEI system
         * @param {string} orgId Organization id for which users to be fetched
         * @param {string} [searchText] Search by organization name.
         * @param {string} [page_no] Page number to fetch
         * @param {string} [page_size] Total records to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsers: function (orgId, searchText, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OrganizationApiAxiosParamCreator(configuration).getOrganizationUsers(orgId, searchText, page_no, page_size, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Updates an organization in the TDEI system.  Returns success if updated.
         * @summary Updates an organization in the TDEI system
         * @param {Organization} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.OrganizationApiAxiosParamCreator(configuration).updateOrganization(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * OrganizationApi - factory interface
 * @export
 */
exports.OrganizationApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Creates an organization in the TDEI system.  Returns the id for the newly created organization.
         * @summary Creates an organization in the TDEI system
         * @param {Organization} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, exports.OrganizationApiFp(configuration).createOrganization(body, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Activates/Deactives the organization.
         * @summary Activates/Deactives the organization.
         * @param {string} orgId Organization Id of the organization to be Activated/Deactivated.
         * @param {boolean} status Boolean flag to Activate/Deactivate organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization: function (orgId, status, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, exports.OrganizationApiFp(configuration).deleteOrganization(orgId, status, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Gets the organizations in the TDEI system .
         * @summary Gets the organizations in the TDEI system
         * @param {string} [tdei_org_id] Search by organization Id.
         * @param {string} [searchText] Search by organization name.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [page_no] Page number to fetch
         * @param {string} [page_size] Total records to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: function (tdei_org_id, searchText, bbox, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, exports.OrganizationApiFp(configuration).getOrganization(tdei_org_id, searchText, bbox, page_no, page_size, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Gets the organization users in the TDEI system .
         * @summary Gets the organization users in the TDEI system
         * @param {string} orgId Organization id for which users to be fetched
         * @param {string} [searchText] Search by organization name.
         * @param {string} [page_no] Page number to fetch
         * @param {string} [page_size] Total records to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsers: function (orgId, searchText, page_no, page_size, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, exports.OrganizationApiFp(configuration).getOrganizationUsers(orgId, searchText, page_no, page_size, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         * Updates an organization in the TDEI system.  Returns success if updated.
         * @summary Updates an organization in the TDEI system
         * @param {Organization} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, exports.OrganizationApiFp(configuration).updateOrganization(body, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
    };
};
/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
var OrganizationApi = /** @class */ (function (_super) {
    __extends(OrganizationApi, _super);
    function OrganizationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates an organization in the TDEI system.  Returns the id for the newly created organization.
     * @summary Creates an organization in the TDEI system
     * @param {Organization} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    OrganizationApi.prototype.createOrganization = function (body, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, exports.OrganizationApiFp(this.configuration).createOrganization(body, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Activates/Deactives the organization.
     * @summary Activates/Deactives the organization.
     * @param {string} orgId Organization Id of the organization to be Activated/Deactivated.
     * @param {boolean} status Boolean flag to Activate/Deactivate organization.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    OrganizationApi.prototype.deleteOrganization = function (orgId, status, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, exports.OrganizationApiFp(this.configuration).deleteOrganization(orgId, status, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Gets the organizations in the TDEI system .
     * @summary Gets the organizations in the TDEI system
     * @param {string} [tdei_org_id] Search by organization Id.
     * @param {string} [searchText] Search by organization name.
     * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {string} [page_no] Page number to fetch
     * @param {string} [page_size] Total records to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    OrganizationApi.prototype.getOrganization = function (tdei_org_id, searchText, bbox, page_no, page_size, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, exports.OrganizationApiFp(this.configuration).getOrganization(tdei_org_id, searchText, bbox, page_no, page_size, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Gets the organization users in the TDEI system .
     * @summary Gets the organization users in the TDEI system
     * @param {string} orgId Organization id for which users to be fetched
     * @param {string} [searchText] Search by organization name.
     * @param {string} [page_no] Page number to fetch
     * @param {string} [page_size] Total records to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    OrganizationApi.prototype.getOrganizationUsers = function (orgId, searchText, page_no, page_size, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, exports.OrganizationApiFp(this.configuration).getOrganizationUsers(orgId, searchText, page_no, page_size, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     * Updates an organization in the TDEI system.  Returns success if updated.
     * @summary Updates an organization in the TDEI system
     * @param {Organization} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    OrganizationApi.prototype.updateOrganization = function (body, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, exports.OrganizationApiFp(this.configuration).updateOrganization(body, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    return OrganizationApi;
}(base_1.BaseAPI));
exports.OrganizationApi = OrganizationApi;
