/**
 * TDEI Management API
 * Management API, describes admin & user activities in the TDEI system.
 *
 * OpenAPI spec version: v0.1
 * Contact: placeholder_support@transequity.cs.washington.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { OrgRoles } from '../models';
import { Register } from '../models';
import { Response } from '../models';
import { RoleDetails } from '../models';
import { Roles } from '../models';
import { User } from '../models';
/**
 * UserManagementApi - axios parameter creator
 * @export
 */
export declare const UserManagementApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Gets the user associated organizations with roles.
     * @summary Gets the user associated organizations with roles.
     * @param {string} userId User id for which oraganizations to be fetched
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orgRoles: (userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Associates a user with the organization and permissions in the TDEI system. Returns the boolean flag true.
     * @summary Associates a user with the organization and permissions in the TDEI system
     * @param {RoleDetails} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permission: (body: RoleDetails, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Registers the user to the TDEI system.  Returns new User object.
     * @summary Registers the user to the TDEI system
     * @param {Register} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUser: (body: Register, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revokes the user permissions.
     * @summary Revokes the user permissions
     * @param {RoleDetails} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokePermission: (body: RoleDetails, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the TDEI roles.
     * @summary Gets the TDEI roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roles: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserManagementApi - functional programming interface
 * @export
 */
export declare const UserManagementApiFp: (configuration?: Configuration) => {
    /**
     * Gets the user associated organizations with roles.
     * @summary Gets the user associated organizations with roles.
     * @param {string} userId User id for which oraganizations to be fetched
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orgRoles(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<OrgRoles>>>>;
    /**
     * Associates a user with the organization and permissions in the TDEI system. Returns the boolean flag true.
     * @summary Associates a user with the organization and permissions in the TDEI system
     * @param {RoleDetails} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permission(body: RoleDetails, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Response>>>;
    /**
     * Registers the user to the TDEI system.  Returns new User object.
     * @summary Registers the user to the TDEI system
     * @param {Register} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUser(body: Register, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<User>>>;
    /**
     * Revokes the user permissions.
     * @summary Revokes the user permissions
     * @param {RoleDetails} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokePermission(body: RoleDetails, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Response>>>;
    /**
     * Gets the TDEI roles.
     * @summary Gets the TDEI roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Roles>>>>;
};
/**
 * UserManagementApi - factory interface
 * @export
 */
export declare const UserManagementApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Gets the user associated organizations with roles.
     * @summary Gets the user associated organizations with roles.
     * @param {string} userId User id for which oraganizations to be fetched
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orgRoles(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<OrgRoles>>>;
    /**
     * Associates a user with the organization and permissions in the TDEI system. Returns the boolean flag true.
     * @summary Associates a user with the organization and permissions in the TDEI system
     * @param {RoleDetails} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permission(body: RoleDetails, options?: AxiosRequestConfig): Promise<AxiosResponse<Response>>;
    /**
     * Registers the user to the TDEI system.  Returns new User object.
     * @summary Registers the user to the TDEI system
     * @param {Register} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUser(body: Register, options?: AxiosRequestConfig): Promise<AxiosResponse<User>>;
    /**
     * Revokes the user permissions.
     * @summary Revokes the user permissions
     * @param {RoleDetails} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokePermission(body: RoleDetails, options?: AxiosRequestConfig): Promise<AxiosResponse<Response>>;
    /**
     * Gets the TDEI roles.
     * @summary Gets the TDEI roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roles(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Roles>>>;
};
/**
 * UserManagementApi - object-oriented interface
 * @export
 * @class UserManagementApi
 * @extends {BaseAPI}
 */
export declare class UserManagementApi extends BaseAPI {
    /**
     * Gets the user associated organizations with roles.
     * @summary Gets the user associated organizations with roles.
     * @param {string} userId User id for which oraganizations to be fetched
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    orgRoles(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<OrgRoles>>>;
    /**
     * Associates a user with the organization and permissions in the TDEI system. Returns the boolean flag true.
     * @summary Associates a user with the organization and permissions in the TDEI system
     * @param {RoleDetails} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    permission(body: RoleDetails, options?: AxiosRequestConfig): Promise<AxiosResponse<Response>>;
    /**
     * Registers the user to the TDEI system.  Returns new User object.
     * @summary Registers the user to the TDEI system
     * @param {Register} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    registerUser(body: Register, options?: AxiosRequestConfig): Promise<AxiosResponse<User>>;
    /**
     * Revokes the user permissions.
     * @summary Revokes the user permissions
     * @param {RoleDetails} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    revokePermission(body: RoleDetails, options?: AxiosRequestConfig): Promise<AxiosResponse<Response>>;
    /**
     * Gets the TDEI roles.
     * @summary Gets the TDEI roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    roles(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Roles>>>;
}
