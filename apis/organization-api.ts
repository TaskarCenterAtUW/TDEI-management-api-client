/* tslint:disable */
/* eslint-disable */
/**
 * TDEI Management API
 * Management API, describes admin & user activities in the TDEI system.
 *
 * OpenAPI spec version: v0.1
 * Contact: placeholder_support@transequity.cs.washington.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { OrgUser } from '../models';
import { Organization } from '../models';
import { OrganizationList } from '../models';
import { Response } from '../models';
/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an organization in the TDEI system.  Returns the id for the newly created organization.
         * @summary Creates an organization in the TDEI system 
         * @param {Organization} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: async (body: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createOrganization.');
            }
            const localVarPath = `/api/v1/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthorizationToken required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Activates/Deactives the organization.
         * @summary Activates/Deactives the organization.
         * @param {string} orgId Organization Id of the organization to be Activated/Deactivated.
         * @param {boolean} status Boolean flag to Activate/Deactivate organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization: async (orgId: string, status: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            if (orgId === null || orgId === undefined) {
                throw new RequiredError('orgId','Required parameter orgId was null or undefined when calling deleteOrganization.');
            }
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling deleteOrganization.');
            }
            const localVarPath = `/api/v1/organization/{orgId}/active/{status}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthorizationToken required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the organizations in the TDEI system .
         * @summary Gets the organizations in the TDEI system 
         * @param {string} [tdei_org_id] Search by organization Id.
         * @param {string} [searchText] Search by organization name.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [page_no] Page number to fetch
         * @param {string} [page_size] Total records to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: async (tdei_org_id?: string, searchText?: string, bbox?: Array<number>, page_no?: string, page_size?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthorizationToken required

            if (tdei_org_id !== undefined) {
                localVarQueryParameter['tdei_org_id'] = tdei_org_id;
            }

            if (searchText !== undefined) {
                localVarQueryParameter['searchText'] = searchText;
            }

            if (bbox) {
                localVarQueryParameter['bbox'] = bbox;
            }

            if (page_no !== undefined) {
                localVarQueryParameter['page_no'] = page_no;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the organization users in the TDEI system .
         * @summary Gets the organization users in the TDEI system 
         * @param {string} orgId Organization id for which users to be fetched
         * @param {string} [searchText] Search by organization name.
         * @param {string} [page_no] Page number to fetch
         * @param {string} [page_size] Total records to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsers: async (orgId: string, searchText?: string, page_no?: string, page_size?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            if (orgId === null || orgId === undefined) {
                throw new RequiredError('orgId','Required parameter orgId was null or undefined when calling getOrganizationUsers.');
            }
            const localVarPath = `/api/v1/organization/{orgId}/users`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthorizationToken required

            if (searchText !== undefined) {
                localVarQueryParameter['searchText'] = searchText;
            }

            if (page_no !== undefined) {
                localVarQueryParameter['page_no'] = page_no;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an organization in the TDEI system.  Returns success if updated.
         * @summary Updates an organization in the TDEI system 
         * @param {Organization} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization: async (body: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateOrganization.');
            }
            const localVarPath = `/api/v1/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthorizationToken required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates an organization in the TDEI system.  Returns the id for the newly created organization.
         * @summary Creates an organization in the TDEI system 
         * @param {Organization} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(body: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Response>>> {
            const localVarAxiosArgs = await OrganizationApiAxiosParamCreator(configuration).createOrganization(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Activates/Deactives the organization.
         * @summary Activates/Deactives the organization.
         * @param {string} orgId Organization Id of the organization to be Activated/Deactivated.
         * @param {boolean} status Boolean flag to Activate/Deactivate organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganization(orgId: string, status: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OrganizationApiAxiosParamCreator(configuration).deleteOrganization(orgId, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the organizations in the TDEI system .
         * @summary Gets the organizations in the TDEI system 
         * @param {string} [tdei_org_id] Search by organization Id.
         * @param {string} [searchText] Search by organization name.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [page_no] Page number to fetch
         * @param {string} [page_size] Total records to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(tdei_org_id?: string, searchText?: string, bbox?: Array<number>, page_no?: string, page_size?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrganizationList>>> {
            const localVarAxiosArgs = await OrganizationApiAxiosParamCreator(configuration).getOrganization(tdei_org_id, searchText, bbox, page_no, page_size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the organization users in the TDEI system .
         * @summary Gets the organization users in the TDEI system 
         * @param {string} orgId Organization id for which users to be fetched
         * @param {string} [searchText] Search by organization name.
         * @param {string} [page_no] Page number to fetch
         * @param {string} [page_size] Total records to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationUsers(orgId: string, searchText?: string, page_no?: string, page_size?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrgUser>>> {
            const localVarAxiosArgs = await OrganizationApiAxiosParamCreator(configuration).getOrganizationUsers(orgId, searchText, page_no, page_size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an organization in the TDEI system.  Returns success if updated.
         * @summary Updates an organization in the TDEI system 
         * @param {Organization} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganization(body: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OrganizationApiAxiosParamCreator(configuration).updateOrganization(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates an organization in the TDEI system.  Returns the id for the newly created organization.
         * @summary Creates an organization in the TDEI system 
         * @param {Organization} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(body: Organization, options?: AxiosRequestConfig): Promise<AxiosResponse<Response>> {
            return OrganizationApiFp(configuration).createOrganization(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Activates/Deactives the organization.
         * @summary Activates/Deactives the organization.
         * @param {string} orgId Organization Id of the organization to be Activated/Deactivated.
         * @param {boolean} status Boolean flag to Activate/Deactivate organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganization(orgId: string, status: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OrganizationApiFp(configuration).deleteOrganization(orgId, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the organizations in the TDEI system .
         * @summary Gets the organizations in the TDEI system 
         * @param {string} [tdei_org_id] Search by organization Id.
         * @param {string} [searchText] Search by organization name.
         * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
         * @param {string} [page_no] Page number to fetch
         * @param {string} [page_size] Total records to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(tdei_org_id?: string, searchText?: string, bbox?: Array<number>, page_no?: string, page_size?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationList>> {
            return OrganizationApiFp(configuration).getOrganization(tdei_org_id, searchText, bbox, page_no, page_size, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the organization users in the TDEI system .
         * @summary Gets the organization users in the TDEI system 
         * @param {string} orgId Organization id for which users to be fetched
         * @param {string} [searchText] Search by organization name.
         * @param {string} [page_no] Page number to fetch
         * @param {string} [page_size] Total records to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationUsers(orgId: string, searchText?: string, page_no?: string, page_size?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OrgUser>> {
            return OrganizationApiFp(configuration).getOrganizationUsers(orgId, searchText, page_no, page_size, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an organization in the TDEI system.  Returns success if updated.
         * @summary Updates an organization in the TDEI system 
         * @param {Organization} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganization(body: Organization, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OrganizationApiFp(configuration).updateOrganization(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export class OrganizationApi extends BaseAPI {
    /**
     * Creates an organization in the TDEI system.  Returns the id for the newly created organization.
     * @summary Creates an organization in the TDEI system 
     * @param {Organization} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public async createOrganization(body: Organization, options?: AxiosRequestConfig) : Promise<AxiosResponse<Response>> {
        return OrganizationApiFp(this.configuration).createOrganization(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Activates/Deactives the organization.
     * @summary Activates/Deactives the organization.
     * @param {string} orgId Organization Id of the organization to be Activated/Deactivated.
     * @param {boolean} status Boolean flag to Activate/Deactivate organization.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public async deleteOrganization(orgId: string, status: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OrganizationApiFp(this.configuration).deleteOrganization(orgId, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the organizations in the TDEI system .
     * @summary Gets the organizations in the TDEI system 
     * @param {string} [tdei_org_id] Search by organization Id.
     * @param {string} [searchText] Search by organization name.
     * @param {Array<number>} [bbox] A bounding box which specifies the area to be searched. A bounding box is specified by a string providing the lat/lon coordinates of the corners of the bounding box. Coordinate should be specified as west, south, east, north.
     * @param {string} [page_no] Page number to fetch
     * @param {string} [page_size] Total records to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public async getOrganization(tdei_org_id?: string, searchText?: string, bbox?: Array<number>, page_no?: string, page_size?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrganizationList>> {
        return OrganizationApiFp(this.configuration).getOrganization(tdei_org_id, searchText, bbox, page_no, page_size, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the organization users in the TDEI system .
     * @summary Gets the organization users in the TDEI system 
     * @param {string} orgId Organization id for which users to be fetched
     * @param {string} [searchText] Search by organization name.
     * @param {string} [page_no] Page number to fetch
     * @param {string} [page_size] Total records to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public async getOrganizationUsers(orgId: string, searchText?: string, page_no?: string, page_size?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrgUser>> {
        return OrganizationApiFp(this.configuration).getOrganizationUsers(orgId, searchText, page_no, page_size, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an organization in the TDEI system.  Returns success if updated.
     * @summary Updates an organization in the TDEI system 
     * @param {Organization} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public async updateOrganization(body: Organization, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OrganizationApiFp(this.configuration).updateOrganization(body, options).then((request) => request(this.axios, this.basePath));
    }
}
