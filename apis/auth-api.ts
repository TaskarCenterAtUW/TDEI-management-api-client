/* tslint:disable */
/* eslint-disable */
/**
 * TDEI Management API
 * Management API, describes admin & user activities in the TDEI system.
 *
 * OpenAPI spec version: v0.1
 * Contact: placeholder_support@transequity.cs.washington.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Login } from '../models';
import { ResetCredentialModel } from '../models';
import { Token } from '../models';
import { UserProfile } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Authenticates the user to the TDEI system.  Returns access token. 
         * @summary Authenticates the user to the TDEI system
         * @param {Login} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate: async (body: Login, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authenticate.');
            }
            const localVarPath = `/api/v1/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the user profile.
         * @summary Gets the user profile
         * @param {string} [user_name] User name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile: async (user_name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user-profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (user_name !== undefined) {
                localVarQueryParameter['user_name'] = user_name;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh the user token
         * @summary Refresh the user token
         * @param {string} refresh_token Valid refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refresh_token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refresh_token' is not null or undefined
            if (refresh_token === null || refresh_token === undefined) {
                throw new RequiredError('refresh_token','Required parameter refresh_token was null or undefined when calling refreshToken.');
            }
            const localVarPath = `/api/v1/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (refresh_token !== undefined && refresh_token !== null) {
                localVarHeaderParameter['refresh_token'] = String(refresh_token);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Resets the user credential.  Returns the boolean flag if the password is reset successfully.
         * @summary Resets the user credential
         * @param {ResetCredentialModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetCredentials: async (body: ResetCredentialModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling resetCredentials.');
            }
            const localVarPath = `/api/v1/reset-credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthorizationToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Authenticates the user to the TDEI system.  Returns access token. 
         * @summary Authenticates the user to the TDEI system
         * @param {Login} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticate(body: Login, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Token>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authenticate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the user profile.
         * @summary Gets the user profile
         * @param {string} [user_name] User name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProfile(user_name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserProfile>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).getUserProfile(user_name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Refresh the user token
         * @summary Refresh the user token
         * @param {string} refresh_token Valid refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refresh_token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Token>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).refreshToken(refresh_token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Resets the user credential.  Returns the boolean flag if the password is reset successfully.
         * @summary Resets the user credential
         * @param {ResetCredentialModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetCredentials(body: ResetCredentialModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).resetCredentials(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Authenticates the user to the TDEI system.  Returns access token. 
         * @summary Authenticates the user to the TDEI system
         * @param {Login} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticate(body: Login, options?: AxiosRequestConfig): Promise<AxiosResponse<Token>> {
            return AuthApiFp(configuration).authenticate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the user profile.
         * @summary Gets the user profile
         * @param {string} [user_name] User name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProfile(user_name?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserProfile>> {
            return AuthApiFp(configuration).getUserProfile(user_name, options).then((request) => request(axios, basePath));
        },
        /**
         * Refresh the user token
         * @summary Refresh the user token
         * @param {string} refresh_token Valid refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refresh_token: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Token>> {
            return AuthApiFp(configuration).refreshToken(refresh_token, options).then((request) => request(axios, basePath));
        },
        /**
         * Resets the user credential.  Returns the boolean flag if the password is reset successfully.
         * @summary Resets the user credential
         * @param {ResetCredentialModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetCredentials(body: ResetCredentialModel, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return AuthApiFp(configuration).resetCredentials(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Authenticates the user to the TDEI system.  Returns access token. 
     * @summary Authenticates the user to the TDEI system
     * @param {Login} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authenticate(body: Login, options?: AxiosRequestConfig) : Promise<AxiosResponse<Token>> {
        return AuthApiFp(this.configuration).authenticate(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the user profile.
     * @summary Gets the user profile
     * @param {string} [user_name] User name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async getUserProfile(user_name?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserProfile>> {
        return AuthApiFp(this.configuration).getUserProfile(user_name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Refresh the user token
     * @summary Refresh the user token
     * @param {string} refresh_token Valid refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async refreshToken(refresh_token: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Token>> {
        return AuthApiFp(this.configuration).refreshToken(refresh_token, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Resets the user credential.  Returns the boolean flag if the password is reset successfully.
     * @summary Resets the user credential
     * @param {ResetCredentialModel} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async resetCredentials(body: ResetCredentialModel, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return AuthApiFp(this.configuration).resetCredentials(body, options).then((request) => request(this.axios, this.basePath));
    }
}
